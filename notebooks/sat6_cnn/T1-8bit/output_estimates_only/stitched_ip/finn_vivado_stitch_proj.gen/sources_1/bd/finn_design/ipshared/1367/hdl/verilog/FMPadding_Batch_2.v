// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FMPadding_Batch_2_FMPadding_Batch_2,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.955000,HLS_SYN_LAT=803,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=47,HLS_SYN_LUT=536,HLS_VERSION=2023_2}" *)

module FMPadding_Batch_2 (
        ap_clk,
        ap_rst_n,
        in0_V_TVALID,
        out_V_TREADY,
        in0_V_TDATA,
        in0_V_TREADY,
        out_V_TDATA,
        out_V_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst_n;
input   in0_V_TVALID;
input   out_V_TREADY;
input  [7:0] in0_V_TDATA;
output   in0_V_TREADY;
output  [7:0] out_V_TDATA;
output   out_V_TVALID;

 reg    ap_rst_n_inv;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
wire   [0:0] icmp_ln277_fu_159_p2;
wire   [0:0] or_ln22_6_fu_321_p2;
wire   [0:0] or_ln22_13_fu_411_p2;
reg    ap_predicate_op70_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] ap_CS_iter1_fsm;
reg   [0:0] icmp_ln277_reg_511;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
wire    ap_CS_iter1_fsm_state2;
reg   [1:0] ap_CS_iter2_fsm;
reg   [0:0] icmp_ln277_reg_511_pp0_iter1_reg;
wire    regslice_both_out_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
wire    ap_CS_iter2_fsm_state3;
reg    ap_condition_exit_pp0_iter0_stage0;
reg    ap_ready_int;
reg    in0_V_TDATA_blk_n;
reg    out_V_TDATA_blk_n;
reg   [0:0] or_ln22_6_reg_515;
wire   [0:0] or_ln22_6_reg_515_pp0_iter0_reg;
reg   [0:0] or_ln22_13_reg_519;
wire   [0:0] or_ln22_13_reg_519_pp0_iter0_reg;
reg   [7:0] outData_reg_523;
reg   [7:0] ap_phi_mux_outData_1_phi_fu_113_p6;
wire   [7:0] ap_phi_reg_pp0_iter1_outData_1_reg_109;
reg   [3:0] sf_fu_76;
wire   [3:0] sf_3_fu_429_p3;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_sf_2;
reg   [3:0] x_fu_80;
wire   [3:0] select_ln278_fu_229_p3;
reg   [3:0] ap_sig_allocacmp_x_load;
reg   [7:0] indvar_flatten_fu_84;
wire   [7:0] select_ln278_1_fu_443_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [3:0] y_fu_88;
wire   [3:0] select_ln277_1_fu_215_p3;
reg   [3:0] ap_sig_allocacmp_y_load;
reg   [9:0] indvar_flatten10_fu_92;
wire   [9:0] add_ln277_fu_165_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten10_load;
wire   [0:0] icmp_ln278_fu_177_p2;
wire   [0:0] icmp_ln279_fu_197_p2;
wire   [0:0] xor_ln277_fu_191_p2;
wire   [3:0] add_ln277_1_fu_209_p2;
wire   [3:0] select_ln277_fu_183_p3;
wire   [0:0] and_ln277_fu_203_p2;
wire   [3:0] x_2_fu_223_p2;
wire   [0:0] icmp_ln22_1_fu_243_p2;
wire   [0:0] icmp_ln22_fu_237_p2;
wire   [0:0] or_ln22_fu_261_p2;
wire   [0:0] icmp_ln22_2_fu_249_p2;
wire   [0:0] or_ln22_1_fu_273_p2;
wire   [0:0] icmp_ln22_3_fu_255_p2;
wire   [0:0] or_ln22_2_fu_285_p2;
wire   [0:0] icmp_ln22_4_fu_267_p2;
wire   [0:0] or_ln22_3_fu_297_p2;
wire   [0:0] icmp_ln22_5_fu_279_p2;
wire   [0:0] or_ln22_4_fu_309_p2;
wire   [0:0] icmp_ln22_6_fu_291_p2;
wire   [0:0] or_ln22_5_fu_315_p2;
wire   [0:0] icmp_ln22_7_fu_303_p2;
wire   [0:0] icmp_ln22_8_fu_327_p2;
wire   [0:0] icmp_ln22_9_fu_333_p2;
wire   [0:0] or_ln22_7_fu_351_p2;
wire   [0:0] icmp_ln22_10_fu_339_p2;
wire   [0:0] or_ln22_8_fu_363_p2;
wire   [0:0] icmp_ln22_11_fu_345_p2;
wire   [0:0] or_ln22_9_fu_375_p2;
wire   [0:0] icmp_ln22_12_fu_357_p2;
wire   [0:0] or_ln22_10_fu_387_p2;
wire   [0:0] icmp_ln22_13_fu_369_p2;
wire   [0:0] or_ln22_11_fu_399_p2;
wire   [0:0] icmp_ln22_14_fu_381_p2;
wire   [0:0] or_ln22_12_fu_405_p2;
wire   [0:0] icmp_ln22_15_fu_393_p2;
wire   [0:0] or_ln279_fu_423_p2;
wire   [3:0] add_ln279_fu_417_p2;
wire   [7:0] add_ln278_1_fu_437_p2;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready;
wire    ap_done;
wire    ap_continue_int;
wire    regslice_both_in0_V_U_apdone_blk;
wire   [7:0] in0_V_TDATA_int_regslice;
wire    in0_V_TVALID_int_regslice;
reg    in0_V_TREADY_int_regslice;
wire    regslice_both_in0_V_U_ack_in;
reg    out_V_TVALID_int_regslice;
wire    out_V_TREADY_int_regslice;
wire    regslice_both_out_V_U_vld_out;
reg    ap_condition_93;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
#0 sf_fu_76 = 4'd0;
#0 x_fu_80 = 4'd0;
#0 indvar_flatten_fu_84 = 8'd0;
#0 y_fu_88 = 4'd0;
#0 indvar_flatten10_fu_92 = 10'd0;
end

FMPadding_Batch_2_flow_control_loop_pipe_no_ap_cont flow_control_loop_pipe_no_ap_cont_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(1'b1),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(1'b0),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(1'b0)
);

FMPadding_Batch_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_V_TDATA),
    .vld_in(in0_V_TVALID),
    .ack_in(regslice_both_in0_V_U_ack_in),
    .data_out(in0_V_TDATA_int_regslice),
    .vld_out(in0_V_TVALID_int_regslice),
    .ack_out(in0_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_V_U_apdone_blk)
);

FMPadding_Batch_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_mux_outData_1_phi_fu_113_p6),
    .vld_in(out_V_TVALID_int_regslice),
    .ack_in(out_V_TREADY_int_regslice),
    .data_out(out_V_TDATA),
    .vld_out(regslice_both_out_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_93)) begin
        if ((icmp_ln277_fu_159_p2 == 1'd0)) begin
            indvar_flatten10_fu_92 <= add_ln277_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten10_fu_92 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_93)) begin
        if ((icmp_ln277_fu_159_p2 == 1'd0)) begin
            indvar_flatten_fu_84 <= select_ln278_1_fu_443_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_84 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_93)) begin
        if ((icmp_ln277_fu_159_p2 == 1'd0)) begin
            sf_fu_76 <= sf_3_fu_429_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            sf_fu_76 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_93)) begin
        if ((icmp_ln277_fu_159_p2 == 1'd0)) begin
            x_fu_80 <= select_ln278_fu_229_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_80 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_93)) begin
        if ((icmp_ln277_fu_159_p2 == 1'd0)) begin
            y_fu_88 <= select_ln277_1_fu_215_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_88 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        icmp_ln277_reg_511 <= icmp_ln277_fu_159_p2;
        or_ln22_13_reg_519 <= or_ln22_13_fu_411_p2;
        or_ln22_6_reg_515 <= or_ln22_6_fu_321_p2;
        outData_reg_523 <= in0_V_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln277_reg_511_pp0_iter1_reg <= icmp_ln277_reg_511;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1))) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln277_fu_159_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln277_reg_511 == 1'd0) & (or_ln22_6_reg_515_pp0_iter0_reg == 1'd1)) | ((icmp_ln277_reg_511 == 1'd0) & (or_ln22_13_reg_519_pp0_iter0_reg == 1'd1) & (or_ln22_6_reg_515_pp0_iter0_reg == 1'd0)))) begin
        ap_phi_mux_outData_1_phi_fu_113_p6 = 8'd0;
    end else if (((icmp_ln277_reg_511 == 1'd0) & (or_ln22_13_reg_519_pp0_iter0_reg == 1'd0) & (or_ln22_6_reg_515_pp0_iter0_reg == 1'd0))) begin
        ap_phi_mux_outData_1_phi_fu_113_p6 = outData_reg_523;
    end else begin
        ap_phi_mux_outData_1_phi_fu_113_p6 = ap_phi_reg_pp0_iter1_outData_1_reg_109;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten10_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten10_load = indvar_flatten10_fu_92;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_84;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_sf_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_sf_2 = sf_fu_76;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_x_load = 4'd0;
    end else begin
        ap_sig_allocacmp_x_load = x_fu_80;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_y_load = 4'd0;
    end else begin
        ap_sig_allocacmp_y_load = y_fu_88;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_predicate_op70_read_state1 == 1'b1))) begin
        in0_V_TDATA_blk_n = in0_V_TVALID_int_regslice;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_predicate_op70_read_state1 == 1'b1))) begin
        in0_V_TREADY_int_regslice = 1'b1;
    end else begin
        in0_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln277_reg_511_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_iter2_fsm_state3)) | ((icmp_ln277_reg_511 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        out_V_TDATA_blk_n = out_V_TREADY_int_regslice;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (icmp_ln277_reg_511 == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        out_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'b0 == ap_block_state1_pp0_stage0_iter0))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ~((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1)))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & (icmp_ln277_reg_511_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter2_fsm = ap_ST_iter0_fsm_state1;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign add_ln277_1_fu_209_p2 = (ap_sig_allocacmp_y_load + 4'd1);

assign add_ln277_fu_165_p2 = (ap_sig_allocacmp_indvar_flatten10_load + 10'd1);

assign add_ln278_1_fu_437_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln279_fu_417_p2 = (ap_sig_allocacmp_sf_2 + 4'd1);

assign and_ln277_fu_203_p2 = (xor_ln277_fu_191_p2 & icmp_ln279_fu_197_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((in0_V_TVALID_int_regslice == 1'b0) & (ap_predicate_op70_read_state1 == 1'b1));
end

always @ (*) begin
    ap_block_state2_io = ((icmp_ln277_reg_511 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln277_reg_511 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln277_reg_511_pp0_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_out_V_U_apdone_blk == 1'b1) | ((icmp_ln277_reg_511_pp0_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_condition_93 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1)))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_phi_reg_pp0_iter1_outData_1_reg_109 = 'bx;

always @ (*) begin
    ap_predicate_op70_read_state1 = ((or_ln22_13_fu_411_p2 == 1'd0) & (or_ln22_6_fu_321_p2 == 1'd0) & (icmp_ln277_fu_159_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln22_10_fu_339_p2 = ((select_ln278_fu_229_p3 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln22_11_fu_345_p2 = ((select_ln278_fu_229_p3 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln22_12_fu_357_p2 = ((select_ln278_fu_229_p3 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln22_13_fu_369_p2 = ((select_ln278_fu_229_p3 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln22_14_fu_381_p2 = ((select_ln278_fu_229_p3 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln22_15_fu_393_p2 = ((select_ln278_fu_229_p3 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_1_fu_243_p2 = ((select_ln277_1_fu_215_p3 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln22_2_fu_249_p2 = ((select_ln277_1_fu_215_p3 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln22_3_fu_255_p2 = ((select_ln277_1_fu_215_p3 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln22_4_fu_267_p2 = ((select_ln277_1_fu_215_p3 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln22_5_fu_279_p2 = ((select_ln277_1_fu_215_p3 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln22_6_fu_291_p2 = ((select_ln277_1_fu_215_p3 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln22_7_fu_303_p2 = ((select_ln277_1_fu_215_p3 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_8_fu_327_p2 = ((select_ln278_fu_229_p3 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln22_9_fu_333_p2 = ((select_ln278_fu_229_p3 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_237_p2 = ((select_ln277_1_fu_215_p3 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln277_fu_159_p2 = ((ap_sig_allocacmp_indvar_flatten10_load == 10'd800) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_177_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd80) ? 1'b1 : 1'b0);

assign icmp_ln279_fu_197_p2 = ((ap_sig_allocacmp_sf_2 == 4'd8) ? 1'b1 : 1'b0);

assign in0_V_TREADY = regslice_both_in0_V_U_ack_in;

assign or_ln22_10_fu_387_p2 = (or_ln22_9_fu_375_p2 | icmp_ln22_12_fu_357_p2);

assign or_ln22_11_fu_399_p2 = (or_ln22_10_fu_387_p2 | icmp_ln22_13_fu_369_p2);

assign or_ln22_12_fu_405_p2 = (or_ln22_11_fu_399_p2 | icmp_ln22_14_fu_381_p2);

assign or_ln22_13_fu_411_p2 = (or_ln22_12_fu_405_p2 | icmp_ln22_15_fu_393_p2);

assign or_ln22_13_reg_519_pp0_iter0_reg = or_ln22_13_reg_519;

assign or_ln22_1_fu_273_p2 = (or_ln22_fu_261_p2 | icmp_ln22_2_fu_249_p2);

assign or_ln22_2_fu_285_p2 = (or_ln22_1_fu_273_p2 | icmp_ln22_3_fu_255_p2);

assign or_ln22_3_fu_297_p2 = (or_ln22_2_fu_285_p2 | icmp_ln22_4_fu_267_p2);

assign or_ln22_4_fu_309_p2 = (or_ln22_3_fu_297_p2 | icmp_ln22_5_fu_279_p2);

assign or_ln22_5_fu_315_p2 = (or_ln22_4_fu_309_p2 | icmp_ln22_6_fu_291_p2);

assign or_ln22_6_fu_321_p2 = (or_ln22_5_fu_315_p2 | icmp_ln22_7_fu_303_p2);

assign or_ln22_6_reg_515_pp0_iter0_reg = or_ln22_6_reg_515;

assign or_ln22_7_fu_351_p2 = (icmp_ln22_9_fu_333_p2 | icmp_ln22_8_fu_327_p2);

assign or_ln22_8_fu_363_p2 = (or_ln22_7_fu_351_p2 | icmp_ln22_10_fu_339_p2);

assign or_ln22_9_fu_375_p2 = (or_ln22_8_fu_363_p2 | icmp_ln22_11_fu_345_p2);

assign or_ln22_fu_261_p2 = (icmp_ln22_fu_237_p2 | icmp_ln22_1_fu_243_p2);

assign or_ln279_fu_423_p2 = (icmp_ln278_fu_177_p2 | and_ln277_fu_203_p2);

assign out_V_TVALID = regslice_both_out_V_U_vld_out;

assign select_ln277_1_fu_215_p3 = ((icmp_ln278_fu_177_p2[0:0] == 1'b1) ? add_ln277_1_fu_209_p2 : ap_sig_allocacmp_y_load);

assign select_ln277_fu_183_p3 = ((icmp_ln278_fu_177_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_x_load);

assign select_ln278_1_fu_443_p3 = ((icmp_ln278_fu_177_p2[0:0] == 1'b1) ? 8'd1 : add_ln278_1_fu_437_p2);

assign select_ln278_fu_229_p3 = ((and_ln277_fu_203_p2[0:0] == 1'b1) ? x_2_fu_223_p2 : select_ln277_fu_183_p3);

assign sf_3_fu_429_p3 = ((or_ln279_fu_423_p2[0:0] == 1'b1) ? 4'd1 : add_ln279_fu_417_p2);

assign x_2_fu_223_p2 = (select_ln277_fu_183_p3 + 4'd1);

assign xor_ln277_fu_191_p2 = (icmp_ln278_fu_177_p2 ^ 1'd1);

endmodule //FMPadding_Batch_2
