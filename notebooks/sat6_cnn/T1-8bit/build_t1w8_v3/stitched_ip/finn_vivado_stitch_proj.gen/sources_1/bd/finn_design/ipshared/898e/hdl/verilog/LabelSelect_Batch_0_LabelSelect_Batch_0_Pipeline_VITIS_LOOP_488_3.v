// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module LabelSelect_Batch_0_LabelSelect_Batch_0_Pipeline_VITIS_LOOP_488_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in0_V_TVALID,
        in0_V_TDATA,
        in0_V_TREADY,
        arrayidx77_0_0_0_load12_i_out,
        arrayidx77_0_0_0_load12_i_out_ap_vld
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in0_V_TVALID;
input  [23:0] in0_V_TDATA;
output   in0_V_TREADY;
output  [7:0] arrayidx77_0_0_0_load12_i_out;
output   arrayidx77_0_0_0_load12_i_out_ap_vld;

reg ap_idle;
reg in0_V_TREADY;
reg arrayidx77_0_0_0_load12_i_out_ap_vld;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
wire   [0:0] icmp_ln488_fu_87_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_CS_iter1_fsm_state2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in0_V_TDATA_blk_n;
reg   [2:0] block_1_reg_174;
reg   [0:0] icmp_ln488_reg_179;
wire   [0:0] icmp_ln488_reg_179_pp0_iter0_reg;
wire   [0:0] cmp_fu_106_p2;
reg   [0:0] cmp_reg_183;
reg   [2:0] idx_1_fu_44;
wire   [2:0] idx_fu_93_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_block_1;
reg   [7:0] arrayidx77_0_0_0_load12_i_fu_48;
wire   [7:0] select_ln509_1_fu_136_p3;
reg   [20:0] part_select_i_i_i15_i_fu_52;
wire   [20:0] select_ln509_fu_112_p3;
reg   [20:0] ap_sig_allocacmp_part_select_i_i_i15_i_load;
wire   [20:0] inval_fu_102_p1;
wire   [7:0] conv2_i_i_i_fu_133_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 idx_1_fu_44 = 3'd0;
#0 arrayidx77_0_0_0_load12_i_fu_48 = 8'd0;
#0 part_select_i_i_i15_i_fu_52 = 21'd0;
#0 ap_done_reg = 1'b0;
end

LabelSelect_Batch_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        arrayidx77_0_0_0_load12_i_fu_48 <= 8'd0;
    end else if (((icmp_ln488_reg_179_pp0_iter0_reg == 1'd0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        arrayidx77_0_0_0_load12_i_fu_48 <= select_ln509_1_fu_136_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        if ((icmp_ln488_fu_87_p2 == 1'd0)) begin
            idx_1_fu_44 <= idx_fu_93_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            idx_1_fu_44 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        if ((icmp_ln488_fu_87_p2 == 1'd0)) begin
            part_select_i_i_i15_i_fu_52 <= select_ln509_fu_112_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            part_select_i_i_i15_i_fu_52 <= 21'd1048576;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        block_1_reg_174 <= ap_sig_allocacmp_block_1;
        cmp_reg_183 <= cmp_fu_106_p2;
        icmp_ln488_reg_179 <= icmp_ln488_fu_87_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln488_fu_87_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_sig_allocacmp_block_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_block_1 = idx_1_fu_44;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_sig_allocacmp_part_select_i_i_i15_i_load = 21'd1048576;
    end else begin
        ap_sig_allocacmp_part_select_i_i_i15_i_load = part_select_i_i_i15_i_fu_52;
    end
end

always @ (*) begin
    if (((icmp_ln488_reg_179_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        arrayidx77_0_0_0_load12_i_out_ap_vld = 1'b1;
    end else begin
        arrayidx77_0_0_0_load12_i_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln488_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b1))) begin
        in0_V_TDATA_blk_n = in0_V_TVALID;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (icmp_ln488_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        in0_V_TREADY = 1'b1;
    end else begin
        in0_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if (((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if ((((icmp_ln488_reg_179_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln488_fu_87_p2 == 1'd0) & (in0_V_TVALID == 1'b0)));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arrayidx77_0_0_0_load12_i_out = arrayidx77_0_0_0_load12_i_fu_48;

assign cmp_fu_106_p2 = (($signed(inval_fu_102_p1) > $signed(ap_sig_allocacmp_part_select_i_i_i15_i_load)) ? 1'b1 : 1'b0);

assign conv2_i_i_i_fu_133_p1 = block_1_reg_174;

assign icmp_ln488_fu_87_p2 = ((ap_sig_allocacmp_block_1 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln488_reg_179_pp0_iter0_reg = icmp_ln488_reg_179;

assign idx_fu_93_p2 = (ap_sig_allocacmp_block_1 + 3'd1);

assign inval_fu_102_p1 = in0_V_TDATA[20:0];

assign select_ln509_1_fu_136_p3 = ((cmp_reg_183[0:0] == 1'b1) ? conv2_i_i_i_fu_133_p1 : arrayidx77_0_0_0_load12_i_fu_48);

assign select_ln509_fu_112_p3 = ((cmp_fu_106_p2[0:0] == 1'b1) ? inval_fu_102_p1 : ap_sig_allocacmp_part_select_i_i_i15_i_load);

endmodule //LabelSelect_Batch_0_LabelSelect_Batch_0_Pipeline_VITIS_LOOP_488_3
