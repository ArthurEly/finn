// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ConvolutionInputGenerator_4_ConvolutionInputGenerator_4,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.258000,HLS_SYN_LAT=68,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=382,HLS_SYN_LUT=1358,HLS_VERSION=2023_2}" *)

module ConvolutionInputGenerator_4 (
        ap_clk,
        ap_rst_n,
        in0_V_TVALID,
        out_V_TREADY,
        in0_V_TDATA,
        in0_V_TREADY,
        out_V_TDATA,
        out_V_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter3_fsm_state4 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;
parameter    ap_ST_iter3_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst_n;
input   in0_V_TVALID;
input   out_V_TREADY;
input  [7:0] in0_V_TDATA;
output   in0_V_TREADY;
output  [7:0] out_V_TDATA;
output   out_V_TVALID;

 reg    ap_rst_n_inv;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
wire   [0:0] icmp_ln781_fu_294_p2;
wire   [0:0] icmp_ln783_fu_327_p2;
wire   [0:0] and_ln829_fu_472_p2;
reg    ap_predicate_op87_read_state1;
reg    ap_predicate_op116_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state2;
reg   [1:0] ap_CS_iter2_fsm;
reg   [0:0] icmp_ln781_reg_713;
reg   [0:0] icmp_ln781_reg_713_pp0_iter1_reg;
reg   [0:0] icmp_ln783_reg_722;
reg   [0:0] icmp_ln783_reg_722_pp0_iter1_reg;
reg   [0:0] icmp_ln799_reg_726;
reg   [0:0] icmp_ln799_reg_726_pp0_iter1_reg;
reg    ap_predicate_op155_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
wire    ap_CS_iter2_fsm_state3;
reg   [1:0] ap_CS_iter3_fsm;
reg   [0:0] icmp_ln781_reg_713_pp0_iter2_reg;
reg   [0:0] icmp_ln783_reg_722_pp0_iter2_reg;
reg   [0:0] icmp_ln799_reg_726_pp0_iter2_reg;
reg    ap_predicate_op156_write_state4;
wire    regslice_both_out_V_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state4_io;
wire    ap_CS_iter3_fsm_state4;
wire    ap_enable_reg_pp0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
reg    ap_ready_int;
reg    in0_V_TDATA_blk_n;
reg    out_V_TDATA_blk_n;
wire   [0:0] trunc_ln775_fu_313_p1;
reg   [0:0] trunc_ln775_reg_717;
reg   [0:0] trunc_ln775_reg_717_pp0_iter1_reg;
wire   [0:0] icmp_ln799_fu_333_p2;
reg   [31:0] k_y_load_reg_730;
reg   [31:0] k_y_load_reg_730_pp0_iter1_reg;
wire   [4:0] current_line_in_block_fu_375_p2;
reg   [4:0] current_line_in_block_reg_735;
wire   [4:0] inputBuf_address0;
reg    inputBuf_ce0;
wire   [7:0] inputBuf_q0;
reg   [4:0] inputBuf_address1;
reg    inputBuf_ce1;
reg    inputBuf_we1;
wire   [4:0] inputBuf_1_address0;
reg    inputBuf_1_ce0;
wire   [7:0] inputBuf_1_q0;
reg   [4:0] inputBuf_1_address1;
reg    inputBuf_1_ce1;
reg    inputBuf_1_we1;
wire   [63:0] zext_ln832_fu_478_p1;
wire   [63:0] zext_ln786_fu_546_p1;
wire   [63:0] zext_ln805_fu_611_p1;
reg   [6:0] i_fu_82;
wire   [6:0] i_2_fu_300_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_1;
reg   [31:0] count_simd_fu_86;
wire   [31:0] count_simd_2_fu_443_p3;
reg   [31:0] ap_sig_allocacmp_count_simd_load;
reg   [31:0] ap_sig_allocacmp_count_simd_load_1;
wire   [0:0] icmp_ln808_fu_387_p2;
wire   [0:0] icmp_ln811_fu_404_p2;
reg   [31:0] k_y_fu_90;
wire   [31:0] k_y_1_fu_398_p2;
reg   [31:0] ap_sig_allocacmp_k_y_load;
reg   [31:0] current_block_write_fu_94;
wire   [31:0] grp_fu_228_p3;
reg   [31:0] ap_sig_allocacmp_current_block_write_1;
wire   [0:0] icmp_ln836_fu_490_p2;
wire   [0:0] icmp_ln789_fu_564_p2;
reg   [31:0] inp_fu_98;
wire   [31:0] inp_3_fu_435_p3;
wire   [31:0] inp_2_fu_558_p2;
reg   [31:0] ap_sig_allocacmp_inp_1;
reg   [31:0] k_x_fu_102;
wire   [31:0] k_x_1_fu_381_p2;
reg   [31:0] ap_sig_allocacmp_k_x_load;
reg   [31:0] read_block_fu_106;
wire   [31:0] read_block_1_fu_580_p2;
reg   [31:0] ap_sig_allocacmp_read_block_load_1;
reg   [31:0] ap_sig_allocacmp_read_block_load;
reg   [31:0] grp_load_fu_205_p1;
reg   [31:0] current_line_fu_110;
wire   [31:0] current_line_2_fu_484_p2;
wire   [31:0] current_line_1_fu_552_p2;
reg   [31:0] ap_sig_allocacmp_current_line_load_2;
reg   [31:0] ap_sig_allocacmp_current_line_load_3;
reg   [31:0] ap_sig_allocacmp_current_line_load;
reg   [31:0] ap_sig_allocacmp_current_line_load_1;
reg   [31:0] grp_load_fu_208_p1;
reg   [31:0] counter_internal_block_fu_114;
wire   [31:0] counter_internal_block_3_fu_533_p3;
reg   [31:0] ap_sig_allocacmp_counter_internal_block_1;
wire   [31:0] grp_fu_217_p2;
wire   [0:0] grp_fu_222_p2;
wire   [26:0] tmp_fu_317_p4;
wire   [0:0] trunc_ln804_fu_345_p1;
wire   [1:0] shl_ln_fu_349_p3;
wire   [1:0] trunc_ln804_1_fu_357_p1;
wire   [1:0] add_ln804_fu_361_p2;
wire   [4:0] shl_ln804_1_fu_367_p3;
wire   [4:0] trunc_ln781_fu_309_p1;
wire   [31:0] count_simd_1_fu_423_p2;
wire   [0:0] icmp_ln814_fu_429_p2;
wire   [0:0] icmp_ln829_fu_466_p2;
wire   [31:0] counter_internal_block_2_fu_521_p2;
wire   [0:0] icmp_ln848_fu_527_p2;
wire   [0:0] tmp_1_fu_616_p3;
wire   [0:0] xor_ln800_fu_623_p2;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;
reg   [1:0] ap_NS_iter3_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
wire    ap_ST_iter1_fsm_state2_blk;
reg    ap_ST_iter2_fsm_state3_blk;
reg    ap_ST_iter3_fsm_state4_blk;
wire    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0;
reg    ap_predicate_op92_store_state1;
reg    ap_enable_operation_92;
reg    ap_enable_state1_pp0_iter0_stage0;
reg    ap_predicate_op121_store_state1;
reg    ap_enable_operation_121;
reg    ap_predicate_op148_load_state2;
reg    ap_enable_operation_148;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_state2_pp0_iter1_stage0;
reg    ap_predicate_op152_load_state3;
reg    ap_enable_operation_152;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_state3_pp0_iter2_stage0;
reg    ap_predicate_op94_store_state1;
reg    ap_enable_operation_94;
reg    ap_predicate_op123_store_state1;
reg    ap_enable_operation_123;
reg    ap_predicate_op149_load_state2;
reg    ap_enable_operation_149;
reg    ap_predicate_op153_load_state3;
reg    ap_enable_operation_153;
wire    ap_start_int;
wire    ap_ready;
wire    ap_done;
wire    ap_continue_int;
wire    regslice_both_in0_V_U_apdone_blk;
wire   [7:0] in0_V_TDATA_int_regslice;
wire    in0_V_TVALID_int_regslice;
reg    in0_V_TREADY_int_regslice;
wire    regslice_both_in0_V_U_ack_in;
wire   [7:0] out_V_TDATA_int_regslice;
reg    out_V_TVALID_int_regslice;
wire    out_V_TREADY_int_regslice;
wire    regslice_both_out_V_U_vld_out;
reg    ap_condition_243;
reg    ap_condition_127;
reg    ap_condition_267;
reg    ap_condition_292;
reg    ap_condition_263;
reg    ap_condition_308;
reg    ap_condition_642;
reg    ap_condition_645;
reg    ap_condition_282;
reg    ap_condition_240;
reg    ap_condition_254;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
#0 ap_CS_iter3_fsm = 2'd1;
#0 i_fu_82 = 7'd0;
#0 count_simd_fu_86 = 32'd0;
#0 k_y_fu_90 = 32'd0;
#0 current_block_write_fu_94 = 32'd0;
#0 inp_fu_98 = 32'd0;
#0 k_x_fu_102 = 32'd0;
#0 read_block_fu_106 = 32'd0;
#0 current_line_fu_110 = 32'd0;
#0 counter_internal_block_fu_114 = 32'd0;
end

ConvolutionInputGenerator_4_inputBuf_RAM_S2P_LUTRAM_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
inputBuf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(inputBuf_address0),
    .ce0(inputBuf_ce0),
    .q0(inputBuf_q0),
    .address1(inputBuf_address1),
    .ce1(inputBuf_ce1),
    .we1(inputBuf_we1),
    .d1(in0_V_TDATA_int_regslice)
);

ConvolutionInputGenerator_4_inputBuf_RAM_S2P_LUTRAM_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
inputBuf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(inputBuf_1_address0),
    .ce0(inputBuf_1_ce0),
    .q0(inputBuf_1_q0),
    .address1(inputBuf_1_address1),
    .ce1(inputBuf_1_ce1),
    .we1(inputBuf_1_we1),
    .d1(in0_V_TDATA_int_regslice)
);

ConvolutionInputGenerator_4_flow_control_loop_pipe_no_ap_cont flow_control_loop_pipe_no_ap_cont_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(1'b1),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(1'b0),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(1'b0)
);

ConvolutionInputGenerator_4_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_V_TDATA),
    .vld_in(in0_V_TVALID),
    .ack_in(regslice_both_in0_V_U_ack_in),
    .data_out(in0_V_TDATA_int_regslice),
    .vld_out(in0_V_TVALID_int_regslice),
    .ack_out(in0_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_V_U_apdone_blk)
);

ConvolutionInputGenerator_4_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_V_TDATA_int_regslice),
    .vld_in(out_V_TVALID_int_regslice),
    .ack_in(out_V_TREADY_int_regslice),
    .data_out(out_V_TDATA),
    .vld_out(regslice_both_out_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter3_fsm <= ap_ST_iter3_fsm_state0;
    end else begin
        ap_CS_iter3_fsm <= ap_NS_iter3_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_127)) begin
        if ((1'b1 == ap_condition_243)) begin
            count_simd_fu_86 <= count_simd_2_fu_443_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            count_simd_fu_86 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_127)) begin
        if ((1'b1 == ap_condition_267)) begin
            counter_internal_block_fu_114 <= 32'd0;
        end else if (((icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0))) begin
            counter_internal_block_fu_114 <= counter_internal_block_3_fu_533_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            counter_internal_block_fu_114 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln789_fu_564_p2 == 1'd1)) | (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln836_fu_490_p2 == 1'd1)))) begin
        current_block_write_fu_94 <= grp_fu_228_p3;
    end else if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        current_block_write_fu_94 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_127)) begin
        if ((1'b1 == ap_condition_267)) begin
            current_line_fu_110 <= 32'd0;
        end else if ((1'b1 == ap_condition_308)) begin
            current_line_fu_110 <= current_line_1_fu_552_p2;
        end else if ((1'b1 == ap_condition_263)) begin
            current_line_fu_110 <= 32'd0;
        end else if ((1'b1 == ap_condition_292)) begin
            current_line_fu_110 <= current_line_2_fu_484_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            current_line_fu_110 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_127)) begin
        if ((icmp_ln781_fu_294_p2 == 1'd0)) begin
            i_fu_82 <= i_2_fu_300_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_82 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_127)) begin
        if (((icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln781_fu_294_p2 == 1'd0))) begin
            inp_fu_98 <= inp_2_fu_558_p2;
        end else if ((1'b1 == ap_condition_243)) begin
            inp_fu_98 <= inp_3_fu_435_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            inp_fu_98 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_127)) begin
        if ((1'b1 == ap_condition_240)) begin
            k_x_fu_102 <= 32'd0;
        end else if ((1'b1 == ap_condition_282)) begin
            k_x_fu_102 <= k_x_1_fu_381_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_x_fu_102 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_127)) begin
        if ((1'b1 == ap_condition_243)) begin
            k_y_fu_90 <= 32'd0;
        end else if ((1'b1 == ap_condition_254)) begin
            k_y_fu_90 <= k_y_1_fu_398_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_y_fu_90 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln789_fu_564_p2 == 1'd1))) begin
        read_block_fu_106 <= read_block_1_fu_580_p2;
    end else if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln836_fu_490_p2 == 1'd1))) begin
        read_block_fu_106 <= 32'd1;
    end else if (((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln836_fu_490_p2 == 1'd0)) | (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1)))) begin
        read_block_fu_106 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        current_line_in_block_reg_735 <= current_line_in_block_fu_375_p2;
        icmp_ln781_reg_713 <= icmp_ln781_fu_294_p2;
        icmp_ln783_reg_722 <= icmp_ln783_fu_327_p2;
        icmp_ln799_reg_726 <= icmp_ln799_fu_333_p2;
        k_y_load_reg_730 <= ap_sig_allocacmp_k_y_load;
        trunc_ln775_reg_717 <= trunc_ln775_fu_313_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        icmp_ln781_reg_713_pp0_iter1_reg <= icmp_ln781_reg_713;
        icmp_ln783_reg_722_pp0_iter1_reg <= icmp_ln783_reg_722;
        icmp_ln799_reg_726_pp0_iter1_reg <= icmp_ln799_reg_726;
        k_y_load_reg_730_pp0_iter1_reg <= k_y_load_reg_730;
        trunc_ln775_reg_717_pp0_iter1_reg <= trunc_ln775_reg_717;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        icmp_ln781_reg_713_pp0_iter2_reg <= icmp_ln781_reg_713_pp0_iter1_reg;
        icmp_ln783_reg_722_pp0_iter2_reg <= icmp_ln783_reg_722_pp0_iter1_reg;
        icmp_ln799_reg_726_pp0_iter2_reg <= icmp_ln799_reg_726_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_iter1_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) begin
        ap_ST_iter2_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_iter2_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) begin
        ap_ST_iter3_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_iter3_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln781_fu_294_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_count_simd_load = 32'd0;
    end else begin
        ap_sig_allocacmp_count_simd_load = count_simd_fu_86;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_count_simd_load_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_count_simd_load_1 = count_simd_fu_86;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_counter_internal_block_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_counter_internal_block_1 = counter_internal_block_fu_114;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_current_block_write_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_current_block_write_1 = current_block_write_fu_94;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_current_line_load = 32'd0;
    end else begin
        ap_sig_allocacmp_current_line_load = current_line_fu_110;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_current_line_load_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_current_line_load_1 = current_line_fu_110;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_current_line_load_2 = 32'd0;
    end else begin
        ap_sig_allocacmp_current_line_load_2 = current_line_fu_110;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_current_line_load_3 = 32'd0;
    end else begin
        ap_sig_allocacmp_current_line_load_3 = current_line_fu_110;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_82;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_inp_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_inp_1 = inp_fu_98;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k_x_load = 32'd0;
    end else begin
        ap_sig_allocacmp_k_x_load = k_x_fu_102;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k_y_load = 32'd0;
    end else begin
        ap_sig_allocacmp_k_y_load = k_y_fu_90;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_read_block_load = 32'd0;
    end else begin
        ap_sig_allocacmp_read_block_load = read_block_fu_106;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_read_block_load_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_read_block_load_1 = read_block_fu_106;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln781_fu_294_p2 == 1'd0))) begin
        if (((icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln789_fu_564_p2 == 1'd1))) begin
            grp_load_fu_205_p1 = ap_sig_allocacmp_read_block_load;
        end else if ((icmp_ln783_fu_327_p2 == 1'd0)) begin
            grp_load_fu_205_p1 = ap_sig_allocacmp_read_block_load_1;
        end else begin
            grp_load_fu_205_p1 = 'bx;
        end
    end else begin
        grp_load_fu_205_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln781_fu_294_p2 == 1'd0))) begin
        if ((icmp_ln783_fu_327_p2 == 1'd1)) begin
            grp_load_fu_208_p1 = ap_sig_allocacmp_current_line_load;
        end else if (((1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0))) begin
            grp_load_fu_208_p1 = ap_sig_allocacmp_current_line_load_2;
        end else begin
            grp_load_fu_208_p1 = 'bx;
        end
    end else begin
        grp_load_fu_208_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_iter0_fsm_state1) & (ap_predicate_op116_read_state1 == 1'b1)) | ((1'b1 == ap_CS_iter0_fsm_state1) & (ap_predicate_op87_read_state1 == 1'b1)))) begin
        in0_V_TDATA_blk_n = in0_V_TVALID_int_regslice;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_predicate_op116_read_state1 == 1'b1)) | (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_predicate_op87_read_state1 == 1'b1)))) begin
        in0_V_TREADY_int_regslice = 1'b1;
    end else begin
        in0_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_642)) begin
        if ((icmp_ln783_fu_327_p2 == 1'd1)) begin
            inputBuf_1_address1 = zext_ln786_fu_546_p1;
        end else if (((1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0))) begin
            inputBuf_1_address1 = zext_ln832_fu_478_p1;
        end else begin
            inputBuf_1_address1 = 'bx;
        end
    end else begin
        inputBuf_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        inputBuf_1_ce0 = 1'b1;
    end else begin
        inputBuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd1)) | (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd1)))) begin
        inputBuf_1_ce1 = 1'b1;
    end else begin
        inputBuf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd1)) | (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd1)))) begin
        inputBuf_1_we1 = 1'b1;
    end else begin
        inputBuf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_645)) begin
        if ((icmp_ln783_fu_327_p2 == 1'd1)) begin
            inputBuf_address1 = zext_ln786_fu_546_p1;
        end else if (((1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0))) begin
            inputBuf_address1 = zext_ln832_fu_478_p1;
        end else begin
            inputBuf_address1 = 'bx;
        end
    end else begin
        inputBuf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        inputBuf_ce0 = 1'b1;
    end else begin
        inputBuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd0)) | (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd0)))) begin
        inputBuf_ce1 = 1'b1;
    end else begin
        inputBuf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd0)) | (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1) & (1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd0)))) begin
        inputBuf_we1 = 1'b1;
    end else begin
        inputBuf_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op155_write_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3)) | ((1'b1 == ap_CS_iter3_fsm_state4) & (ap_predicate_op156_write_state4 == 1'b1)))) begin
        out_V_TDATA_blk_n = out_V_TREADY_int_regslice;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (ap_predicate_op155_write_state3 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        out_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (1'b1 == ap_block_state1_pp0_stage0_iter0))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b0 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~(((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter3_fsm)
        ap_ST_iter3_fsm_state4 : begin
            if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)) & ~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & ((1'b0 == ap_CS_iter2_fsm_state3) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2)))))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end else if ((~((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)) & (icmp_ln781_reg_713_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_iter3_fsm_state4))) begin
                ap_NS_iter3_fsm = ap_ST_iter0_fsm_state1;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end
        end
        ap_ST_iter3_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state4;
            end else begin
                ap_NS_iter3_fsm = ap_ST_iter3_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter3_fsm = 'bx;
        end
    endcase
end

assign add_ln804_fu_361_p2 = (shl_ln_fu_349_p3 + trunc_ln804_1_fu_357_p1);

assign and_ln829_fu_472_p2 = (icmp_ln829_fu_466_p2 & icmp_ln799_fu_333_p2);

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

assign ap_CS_iter3_fsm_state4 = ap_CS_iter3_fsm[32'd1];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_iter0_fsm_state1 == ap_CS_iter0_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2) | (1'b1 == ap_block_state1_pp0_stage0_iter0) | (1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3) | ((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (regslice_both_out_V_U_apdone_blk == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (((in0_V_TVALID_int_regslice == 1'b0) & (ap_predicate_op116_read_state1 == 1'b1)) | ((in0_V_TVALID_int_regslice == 1'b0) & (ap_predicate_op87_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_io = ((ap_predicate_op155_write_state3 == 1'b1) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op155_write_state3 == 1'b1) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((out_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op156_write_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((regslice_both_out_V_U_apdone_blk == 1'b1) | ((out_V_TREADY_int_regslice == 1'b0) & (ap_predicate_op156_write_state4 == 1'b1)));
end

always @ (*) begin
    ap_condition_127 = (~((1'b1 == ap_block_state1_pp0_stage0_iter0) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == ap_CS_iter3_fsm_state4) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3)))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

always @ (*) begin
    ap_condition_240 = ((icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln808_fu_387_p2 == 1'd1) & (icmp_ln799_fu_333_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_243 = ((icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln811_fu_404_p2 == 1'd1) & (icmp_ln808_fu_387_p2 == 1'd1) & (icmp_ln799_fu_333_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_254 = ((icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln811_fu_404_p2 == 1'd0) & (icmp_ln808_fu_387_p2 == 1'd1) & (icmp_ln799_fu_333_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_263 = ((1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln836_fu_490_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_267 = ((icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln789_fu_564_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_282 = ((icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln808_fu_387_p2 == 1'd0) & (icmp_ln799_fu_333_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_292 = ((1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln836_fu_490_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_308 = ((icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln781_fu_294_p2 == 1'd0) & (icmp_ln789_fu_564_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_642 = ((1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd1));
end

always @ (*) begin
    ap_condition_645 = ((1'b1 == ap_CS_iter0_fsm_state1) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd0));
end

always @ (*) begin
    ap_enable_operation_121 = (ap_predicate_op121_store_state1 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_123 = (ap_predicate_op123_store_state1 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_148 = (ap_predicate_op148_load_state2 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_149 = (ap_predicate_op149_load_state2 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_152 = (ap_predicate_op152_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_153 = (ap_predicate_op153_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_92 = (ap_predicate_op92_store_state1 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_94 = (ap_predicate_op94_store_state1 == 1'b1);
end

assign ap_enable_reg_pp0_iter0 = 1'b0;

always @ (*) begin
    ap_enable_state1_pp0_iter0_stage0 = ((1'b1 == ap_CS_iter0_fsm_state1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_state2_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2));
end

always @ (*) begin
    ap_enable_state3_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_iter2_fsm_state3));
end

assign ap_loop_exit_ready_pp0_iter3_reg = 1'b0;

always @ (*) begin
    ap_predicate_op116_read_state1 = ((icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln781_fu_294_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op121_store_state1 = ((icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd0));
end

always @ (*) begin
    ap_predicate_op123_store_state1 = ((icmp_ln783_fu_327_p2 == 1'd1) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd1));
end

always @ (*) begin
    ap_predicate_op148_load_state2 = ((icmp_ln799_reg_726 == 1'd1) & (icmp_ln783_reg_722 == 1'd0) & (icmp_ln781_reg_713 == 1'd0));
end

always @ (*) begin
    ap_predicate_op149_load_state2 = ((icmp_ln799_reg_726 == 1'd1) & (icmp_ln783_reg_722 == 1'd0) & (icmp_ln781_reg_713 == 1'd0));
end

always @ (*) begin
    ap_predicate_op152_load_state3 = ((icmp_ln799_reg_726_pp0_iter1_reg == 1'd1) & (icmp_ln783_reg_722_pp0_iter1_reg == 1'd0) & (icmp_ln781_reg_713_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op153_load_state3 = ((icmp_ln799_reg_726_pp0_iter1_reg == 1'd1) & (icmp_ln783_reg_722_pp0_iter1_reg == 1'd0) & (icmp_ln781_reg_713_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op155_write_state3 = ((icmp_ln799_reg_726_pp0_iter1_reg == 1'd1) & (icmp_ln783_reg_722_pp0_iter1_reg == 1'd0) & (icmp_ln781_reg_713_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op156_write_state4 = ((icmp_ln781_reg_713_pp0_iter2_reg == 1'd0) & (icmp_ln799_reg_726_pp0_iter2_reg == 1'd1) & (icmp_ln783_reg_722_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op87_read_state1 = ((1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op92_store_state1 = ((1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd0));
end

always @ (*) begin
    ap_predicate_op94_store_state1 = ((1'd1 == and_ln829_fu_472_p2) & (icmp_ln783_fu_327_p2 == 1'd0) & (icmp_ln781_fu_294_p2 == 1'd0) & (trunc_ln775_fu_313_p1 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign count_simd_1_fu_423_p2 = (ap_sig_allocacmp_count_simd_load_1 + 32'd1);

assign count_simd_2_fu_443_p3 = ((icmp_ln814_fu_429_p2[0:0] == 1'b1) ? 32'd0 : count_simd_1_fu_423_p2);

assign counter_internal_block_2_fu_521_p2 = (ap_sig_allocacmp_counter_internal_block_1 + 32'd1);

assign counter_internal_block_3_fu_533_p3 = ((icmp_ln848_fu_527_p2[0:0] == 1'b1) ? 32'd0 : counter_internal_block_2_fu_521_p2);

assign current_line_1_fu_552_p2 = (ap_sig_allocacmp_current_line_load_1 + 32'd1);

assign current_line_2_fu_484_p2 = (ap_sig_allocacmp_current_line_load_3 + 32'd1);

assign current_line_in_block_fu_375_p2 = (shl_ln804_1_fu_367_p3 + trunc_ln781_fu_309_p1);

assign grp_fu_217_p2 = (ap_sig_allocacmp_current_block_write_1 + 32'd1);

assign grp_fu_222_p2 = ((grp_fu_217_p2 == 32'd2) ? 1'b1 : 1'b0);

assign grp_fu_228_p3 = ((grp_fu_222_p2[0:0] == 1'b1) ? 32'd0 : grp_fu_217_p2);

assign i_2_fu_300_p2 = (ap_sig_allocacmp_i_1 + 7'd1);

assign icmp_ln781_fu_294_p2 = ((ap_sig_allocacmp_i_1 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln783_fu_327_p2 = ((tmp_fu_317_p4 == 27'd0) ? 1'b1 : 1'b0);

assign icmp_ln789_fu_564_p2 = ((current_line_1_fu_552_p2 == 32'd32) ? 1'b1 : 1'b0);

assign icmp_ln799_fu_333_p2 = ((ap_sig_allocacmp_counter_internal_block_1 < 32'd31) ? 1'b1 : 1'b0);

assign icmp_ln808_fu_387_p2 = ((k_x_1_fu_381_p2 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln811_fu_404_p2 = ((k_y_1_fu_398_p2 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln814_fu_429_p2 = ((count_simd_1_fu_423_p2 == 32'd8) ? 1'b1 : 1'b0);

assign icmp_ln829_fu_466_p2 = ((grp_load_fu_205_p1 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln836_fu_490_p2 = ((current_line_2_fu_484_p2 == 32'd32) ? 1'b1 : 1'b0);

assign icmp_ln848_fu_527_p2 = ((counter_internal_block_2_fu_521_p2 == 32'd31) ? 1'b1 : 1'b0);

assign in0_V_TREADY = regslice_both_in0_V_U_ack_in;

assign inp_2_fu_558_p2 = (ap_sig_allocacmp_inp_1 + 32'd1);

assign inp_3_fu_435_p3 = ((icmp_ln814_fu_429_p2[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_inp_1);

assign inputBuf_1_address0 = zext_ln805_fu_611_p1;

assign inputBuf_address0 = zext_ln805_fu_611_p1;

assign k_x_1_fu_381_p2 = (ap_sig_allocacmp_k_x_load + 32'd1);

assign k_y_1_fu_398_p2 = (ap_sig_allocacmp_k_y_load + 32'd1);

assign out_V_TDATA_int_regslice = ((xor_ln800_fu_623_p2[0:0] == 1'b1) ? inputBuf_q0 : inputBuf_1_q0);

assign out_V_TVALID = regslice_both_out_V_U_vld_out;

assign read_block_1_fu_580_p2 = (grp_load_fu_205_p1 + 32'd1);

assign shl_ln804_1_fu_367_p3 = {{add_ln804_fu_361_p2}, {3'd0}};

assign shl_ln_fu_349_p3 = {{trunc_ln804_fu_345_p1}, {1'd0}};

assign tmp_1_fu_616_p3 = k_y_load_reg_730_pp0_iter1_reg[32'd1];

assign tmp_fu_317_p4 = {{ap_sig_allocacmp_inp_1[31:5]}};

assign trunc_ln775_fu_313_p1 = ap_sig_allocacmp_current_block_write_1[0:0];

assign trunc_ln781_fu_309_p1 = ap_sig_allocacmp_count_simd_load[4:0];

assign trunc_ln804_1_fu_357_p1 = ap_sig_allocacmp_k_x_load[1:0];

assign trunc_ln804_fu_345_p1 = ap_sig_allocacmp_k_y_load[0:0];

assign xor_ln800_fu_623_p2 = (trunc_ln775_reg_717_pp0_iter1_reg ^ tmp_1_fu_616_p3);

assign zext_ln786_fu_546_p1 = grp_load_fu_208_p1;

assign zext_ln805_fu_611_p1 = current_line_in_block_reg_735;

assign zext_ln832_fu_478_p1 = grp_load_fu_208_p1;

always @ (posedge ap_clk) begin
    ap_enable_reg_pp0_iter1 <= 1'b0;
    ap_enable_reg_pp0_iter2 <= 1'b0;
end

endmodule //ConvolutionInputGenerator_4
